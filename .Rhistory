geom_bar(aes(y = 1), stat = "identity", fill = "#00887D", alpha = 0.3) +
geom_line(aes(y = `Mau Pagadores`), color = "#00887D") +
geom_point(aes(y = `Mau Pagadores`), color = "#00887D") +
geom_text(aes(y = `Mau Pagadores`, label = paste0(sprintf("%.2f", `Mau Pagadores` * 100), "%")), hjust = -0.2, vjust = 0.5) +
scale_x_continuous(breaks = 1:10) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1), name = "Taxa de inadimplência") +
theme_bw()
bases$credit_score2  <- bases$credit_score2
df <- bases$credit_score2
# Substituir $ por nada
names(df) <- gsub("\\$", "", names(df))
# Substituir - por nada
names(df) <- gsub("-", "", names(df))
# Substituir + por nada
names(df) <- gsub("\\+", "", names(df))
# Substituir _ por nada
names(df) <- gsub("_", "", names(df))
# Substituir espaços por _
names(df) <- gsub("\\s", "_", names(df))
df <-df %>% mutate(AttritionFlag = as.factor(AttritionFlag))
df
train_index <- sample(1:nrow(df), nrow(df)*0.8)
train_data <- smote_train[train_index, ]
test_data <- smote_train[-train_index, ]
library(xgboost)
#
train_label <- train_data$AttritionFlag
train_matrix <- xgb.DMatrix(data = as.matrix(train_data[,-which(names(train_data) == "AttritionFlag")]), label = train_label)
test_label <- test_data$AttritionFlag
test_matrix <- xgb.DMatrix(data = as.matrix(test_data[,-which(names(test_data) == "AttritionFlag")]), label = test_label)
params <- list(
objective = "binary:logistic",
eval_metric = "logloss",
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1
)
xgb_model <- xgb.train(
params = params,
data = train_matrix,
nrounds = 500,
watchlist = list(val = test_matrix),
early_stopping_rounds = 10,
maximize = TRUE
)
library(pROC)
pred <- predict(xgb_model, test_matrix, type = "prob")
roc_obj <- roc(test_label, pred)
roc_obj
# As probabilidades previstas e os rótulos reais
df_decile <- data.frame('y_true' = test_label, 'y_prob' = pred)
# Observações com base nas probabilidades previstas
df_decile <- df_decile %>% arrange(desc(y_prob))
# Tamanho do decil
n <- nrow(df_decile)
decile_size <- n %/% 10
# Vetor para armazenar os rótulos decil
decile_labels <- rep(1:10, each = decile_size)
# Se o tamanho do vetor decile_labels for menor que n, adicione rótulos extras
if (length(decile_labels) < n) {
decile_labels <- c(decile_labels, rep(10, n - length(decile_labels)))
}
# Atribua os rótulos decil ao data frame
df_decile$decile <- decile_labels
# Calcule a taxa de mau pagadores para cada grupo decil
decile_stats <- df_decile %>% group_by(decile) %>% summarise('Mau Pagadores' = mean(y_true)) %>% ungroup()
# Taxa de mau pagadores para cada decil
print(decile_stats)
# Gráfico de linhas com fundo branco
ggplot(data = decile_stats, aes(x = decile, y = `Mau Pagadores`)) +
geom_line(color = "#00887D") +
geom_point(color = "#00887D") +
geom_text(aes(label = paste0(sprintf("%.2f", `Mau Pagadores` * 100), "%")), hjust = -0.2, vjust = 0.5) +
scale_x_continuous(breaks = 1:10) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1), name = "Taxa de inadimplência") +
theme_bw()
# Gráfico de barras com representatividade
ggplot(data = decile_stats, aes(x = decile)) +
geom_bar(aes(y = 1), stat = "identity", fill = "#00887D", alpha = 0.3) +
geom_line(aes(y = `Mau Pagadores`), color = "#00887D") +
geom_point(aes(y = `Mau Pagadores`), color = "#00887D") +
geom_text(aes(y = `Mau Pagadores`, label = paste0(sprintf("%.2f", `Mau Pagadores` * 100), "%")), hjust = -0.2, vjust = 0.5) +
scale_x_continuous(breaks = 1:10) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1), name = "Taxa de inadimplência") +
theme_bw()
df %>% count(AttritionFlag)
# Realize o oversampling usando SMOTE
smote_train <- ovun.sample(AttritionFlag ~ ., data = df,N = 5000, method = "over")
necessario_por_classe <- 5000 - table(df$AttritionFlag)
necessario_por_classe
# Realize o oversampling usando SMOTE
smote_train <- ovun.sample(AttritionFlag ~ ., data = df,N = necessario_por_classe , method = "over")
# Realize o oversampling usando SMOTE
smote_train <- ovun.sample(AttritionFlag ~ ., data = df,N = 3373 , method = "over")
# Realize o oversampling usando SMOTE
smote_train <- ovun.sample(AttritionFlag ~ ., data = df,N = "3373" , method = "over")
# Calcular o número total necessário de observações após oversampling
total_necessario <- sum(necessario_por_classe)
total_necessario
# Realize o oversampling usando SMOTE
smote_train <- ovun.sample(AttritionFlag ~ ., data = df,N = 6890 , method = "over")
# Realize o oversampling usando SMOTE
smote_train <- ovun.sample(AttritionFlag ~ ., data = df,N = 8000 , method = "over")
# Realize o oversampling usando SMOTE
smote_train <- ovun.sample(AttritionFlag ~ ., data = df,N = 12000 , method = "over")
smote_train <- smote_train$data %>% as_tibble() %>% mutate(AttritionFlag = as.numeric(AttritionFlag )) %>%
mutate(AttritionFlag = ifelse(AttritionFlag == 2, 1, ifelse(AttritionFlag == 1, 0, AttritionFlag)))
set.seed(123)
train_index <- sample(1:nrow(smote_train), nrow(df)*0.8)
train_data <- smote_train[train_index, ]
test_data <- smote_train[-train_index, ]
library(xgboost)
#
train_label <- train_data$AttritionFlag
train_matrix <- xgb.DMatrix(data = as.matrix(train_data[,-which(names(train_data) == "AttritionFlag")]), label = train_label)
test_label <- test_data$AttritionFlag
test_matrix <- xgb.DMatrix(data = as.matrix(test_data[,-which(names(test_data) == "AttritionFlag")]), label = test_label)
params <- list(
objective = "binary:logistic",
eval_metric = "logloss",
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1
)
xgb_model <- xgb.train(
params = params,
data = train_matrix,
nrounds = 500,
watchlist = list(val = test_matrix),
early_stopping_rounds = 10,
maximize = TRUE
)
library(pROC)
pred <- predict(xgb_model, test_matrix, type = "prob")
roc_obj <- roc(test_label, pred)
roc_obj$roc$thresholds[which.max(roc_obj$roc$sensitivities + roc_obj$roc$specificities - 1)]
# As probabilidades previstas e os rótulos reais
df_decile <- data.frame('y_true' = test_label, 'y_prob' = pred)
# Observações com base nas probabilidades previstas
df_decile <- df_decile %>% arrange(desc(y_prob))
# Tamanho do decil
n <- nrow(df_decile)
decile_size <- n %/% 10
# Vetor para armazenar os rótulos decil
decile_labels <- rep(1:10, each = decile_size)
# Se o tamanho do vetor decile_labels for menor que n, adicione rótulos extras
if (length(decile_labels) < n) {
decile_labels <- c(decile_labels, rep(10, n - length(decile_labels)))
}
# Atribua os rótulos decil ao data frame
df_decile$decile <- decile_labels
# Calcule a taxa de mau pagadores para cada grupo decil
decile_stats <- df_decile %>% group_by(decile) %>% summarise('Mau Pagadores' = mean(y_true)) %>% ungroup()
# Taxa de mau pagadores para cada decil
print(decile_stats)
# Defina a taxa de oversampling
over_rate <- 5000 / 1627
smote_train <- SMOTE(AttritionFlag ~ ., data = df, perc.over = over_rate*100, perc.under = 100)
library(DMwR)
library(DMwR)
?ovun.sample
# Realize o oversampling usando SMOTE
smote_train <- ovun.sample(AttritionFlag ~ ., data = df , method = "both")
smote_train <- smote_train$data %>% as_tibble() %>% mutate(AttritionFlag = as.numeric(AttritionFlag )) %>%
mutate(AttritionFlag = ifelse(AttritionFlag == 2, 1, ifelse(AttritionFlag == 1, 0, AttritionFlag)))
set.seed(123)
train_index <- sample(1:nrow(smote_train), nrow(df)*0.8)
train_data <- smote_train[train_index, ]
test_data <- smote_train[-train_index, ]
library(xgboost)
#
train_label <- train_data$AttritionFlag
train_matrix <- xgb.DMatrix(data = as.matrix(train_data[,-which(names(train_data) == "AttritionFlag")]), label = train_label)
test_label <- test_data$AttritionFlag
test_matrix <- xgb.DMatrix(data = as.matrix(test_data[,-which(names(test_data) == "AttritionFlag")]), label = test_label)
params <- list(
objective = "binary:logistic",
eval_metric = "logloss",
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1
)
xgb_model <- xgb.train(
params = params,
data = train_matrix,
nrounds = 500,
watchlist = list(val = test_matrix),
early_stopping_rounds = 10,
maximize = TRUE
)
library(pROC)
pred <- predict(xgb_model, test_matrix, type = "prob")
roc_obj <- roc(test_label, pred)
roc_obj$roc$thresholds[which.max(roc_obj$roc$sensitivities + roc_obj$roc$specificities - 1)]
# As probabilidades previstas e os rótulos reais
df_decile <- data.frame('y_true' = test_label, 'y_prob' = pred)
# Observações com base nas probabilidades previstas
df_decile <- df_decile %>% arrange(desc(y_prob))
# Tamanho do decil
n <- nrow(df_decile)
decile_size <- n %/% 10
# Vetor para armazenar os rótulos decil
decile_labels <- rep(1:10, each = decile_size)
# Se o tamanho do vetor decile_labels for menor que n, adicione rótulos extras
if (length(decile_labels) < n) {
decile_labels <- c(decile_labels, rep(10, n - length(decile_labels)))
}
# Atribua os rótulos decil ao data frame
df_decile$decile <- decile_labels
# Calcule a taxa de mau pagadores para cada grupo decil
decile_stats <- df_decile %>% group_by(decile) %>% summarise('Mau Pagadores' = mean(y_true)) %>% ungroup()
# Taxa de mau pagadores para cada decil
print(decile_stats)
# Gráfico de linhas com fundo branco
ggplot(data = decile_stats, aes(x = decile, y = `Mau Pagadores`)) +
geom_line(color = "#00887D") +
geom_point(color = "#00887D") +
geom_text(aes(label = paste0(sprintf("%.2f", `Mau Pagadores` * 100), "%")), hjust = -0.2, vjust = 0.5) +
scale_x_continuous(breaks = 1:10) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1), name = "Taxa de inadimplência") +
theme_bw()
over_rate <- 5000 / 1627
smote_train <- ovun.sample(AttritionFlag ~ ., data = df, method = "over", N = 8500 + 1627 * over_rate)$data
smote_train
smote_train <- smote_train$data %>% as_tibble() %>% mutate(AttritionFlag = as.numeric(AttritionFlag )) %>%
mutate(AttritionFlag = ifelse(AttritionFlag == 2, 1, ifelse(AttritionFlag == 1, 0, AttritionFlag)))
smote_train
smote_train %>% as_tibble()
smote_train$data %>% as_tibble() %>% mutate(AttritionFlag = as.numeric(AttritionFlag ))
smote_train$data %>% as_tibble()
smote_train$data %>% as_tibble()
smote_train$data %>% as_tibble()
smote_train <- smote_train %>% as_tibble() %>% mutate(AttritionFlag = as.numeric(AttritionFlag )) %>%
mutate(AttritionFlag = ifelse(AttritionFlag == 2, 1, ifelse(AttritionFlag == 1, 0, AttritionFlag)))
set.seed(123)
train_index <- sample(1:nrow(smote_train), nrow(df)*0.8)
train_data <- smote_train[train_index, ]
test_data <- smote_train[-train_index, ]
train_index
train_data <- smote_train[train_index, ]
test_data <- smote_train[-train_index, ]
library(xgboost)
#
train_label <- train_data$AttritionFlag
train_matrix <- xgb.DMatrix(data = as.matrix(train_data[,-which(names(train_data) == "AttritionFlag")]), label = train_label)
test_label <- test_data$AttritionFlag
test_matrix <- xgb.DMatrix(data = as.matrix(test_data[,-which(names(test_data) == "AttritionFlag")]), label = test_label)
params <- list(
objective = "binary:logistic",
eval_metric = "logloss",
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1
)
xgb_model <- xgb.train(
params = params,
data = train_matrix,
nrounds = 500,
watchlist = list(val = test_matrix),
early_stopping_rounds = 10,
maximize = TRUE
)
library(pROC)
pred <- predict(xgb_model, test_matrix, type = "prob")
roc_obj <- roc(test_label, pred)
roc_obj$roc$thresholds[which.max(roc_obj$roc$sensitivities + roc_obj$roc$specificities - 1)]
roc_obj
sample(1:nrow(smote_train), nrow(smote_train)*0.8)
train_index <- sample(1:nrow(smote_train), nrow(smote_train)*0.8)
train_data <- smote_train[train_index, ]
test_data <- smote_train[-train_index, ]
library(xgboost)
#
train_label <- train_data$AttritionFlag
train_matrix <- xgb.DMatrix(data = as.matrix(train_data[,-which(names(train_data) == "AttritionFlag")]), label = train_label)
test_label <- test_data$AttritionFlag
test_matrix <- xgb.DMatrix(data = as.matrix(test_data[,-which(names(test_data) == "AttritionFlag")]), label = test_label)
params <- list(
objective = "binary:logistic",
eval_metric = "logloss",
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1
)
xgb_model <- xgb.train(
params = params,
data = train_matrix,
nrounds = 500,
watchlist = list(val = test_matrix),
early_stopping_rounds = 10,
maximize = TRUE
)
library(pROC)
pred <- predict(xgb_model, test_matrix, type = "prob")
roc_obj <- roc(test_label, pred)
roc_obj
# As probabilidades previstas e os rótulos reais
df_decile <- data.frame('y_true' = test_label, 'y_prob' = pred)
# Observações com base nas probabilidades previstas
df_decile <- df_decile %>% arrange(desc(y_prob))
# Tamanho do decil
n <- nrow(df_decile)
decile_size <- n %/% 10
# Vetor para armazenar os rótulos decil
decile_labels <- rep(1:10, each = decile_size)
# Se o tamanho do vetor decile_labels for menor que n, adicione rótulos extras
if (length(decile_labels) < n) {
decile_labels <- c(decile_labels, rep(10, n - length(decile_labels)))
}
# Atribua os rótulos decil ao data frame
df_decile$decile <- decile_labels
# Calcule a taxa de mau pagadores para cada grupo decil
decile_stats <- df_decile %>% group_by(decile) %>% summarise('Mau Pagadores' = mean(y_true)) %>% ungroup()
# Taxa de mau pagadores para cada decil
print(decile_stats)
pred <- predict(xgb_model, test_matrix, type = "prob")
roc_obj <- roc(test_label, pred)
roc_obj$roc$thresholds[which.max(roc_obj$roc$sensitivities + roc_obj$roc$specificities - 1)]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(data = decile_stats, aes(x = decile, y = `Mau Pagadores`)) +
geom_line(color = "#00887D") +
geom_point(color = "#00887D") +
geom_text(aes(label = paste0(sprintf("%.2f", `Mau Pagadores` * 100), "%")), hjust = -0.2, vjust = 0.5) +
scale_x_continuous(breaks = 1:10) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1), name = "Taxa de inadimplência") +
theme_bw()
ggplot(data = decile_stats, aes(x = decile)) +
geom_bar(aes(y = 1), stat = "identity", fill = "#00887D", alpha = 0.3) +
geom_line(aes(y = `Mau Pagadores`), color = "#00887D") +
geom_point(aes(y = `Mau Pagadores`), color = "#00887D") +
geom_text(aes(y = `Mau Pagadores`, label = paste0(sprintf("%.2f", `Mau Pagadores` * 100), "%")), hjust = -0.2, vjust = 0.5) +
scale_x_continuous(breaks = 1:10) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1), name = "Taxa de inadimplência") +
theme_bw()
ggplot(data = decile_stats, aes(x = decile)) +
geom_bar(aes(y = 1), stat = "identity", fill = "#00887D", alpha = 0.3) +
geom_line(aes(y = `Mau Pagadores`), color = "#00887D") +
geom_point(aes(y = `Mau Pagadores`), color = "#00887D") +
geom_text(aes(y = `Mau Pagadores`, label = paste0(sprintf("%.2f", `Mau Pagadores` * 100), "%")), hjust = -0.2, vjust = 0.5) +
scale_x_continuous(breaks = 1:10) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1), name = "Taxa de inadimplência") +
theme_bw()
decile_stats
decile
ggplot(data = decile_stats, aes(x = decile)) +
geom_bar(aes(y = 1), stat = "identity", fill = "#00887D", alpha = 0.3) +
geom_line(aes(y = `Mau Pagadores`), color = "#00887D") +
geom_point(aes(y = `Mau Pagadores`), color = "#00887D") +
geom_text(aes(y = `Mau Pagadores`, label = paste0(sprintf("%.2f", `Mau Pagadores` * 100), "%")), hjust = -0.2, vjust = 0.5) +
scale_x_continuous(breaks = 1:10) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1), name = "Taxa de inadimplência") +
theme_bw()
runApp()
runApp()
decile_stats %>% glimpse()
decile_stats %>% as_tibble()
ggplot(data = decile_stats %>% as_tible(), aes(x = decile)) +
geom_bar(aes(y = 1), stat = "identity", fill = "#00887D", alpha = 0.3) +
geom_line(aes(y = `Mau Pagadores`), color = "#00887D") +
geom_point(aes(y = `Mau Pagadores`), color = "#00887D") +
geom_text(aes(y = `Mau Pagadores`, label = paste0(sprintf("%.2f", `Mau Pagadores` * 100), "%")), hjust = -0.2, vjust = 0.5) +
scale_x_continuous(breaks = 1:10) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1), name = "Taxa de inadimplência") +
theme_bw()
ggplot(data = decile_stats %>% as_tibble(), aes(x = decile)) +
geom_bar(aes(y = 1), stat = "identity", fill = "#00887D", alpha = 0.3) +
geom_line(aes(y = `Mau Pagadores`), color = "#00887D") +
geom_point(aes(y = `Mau Pagadores`), color = "#00887D") +
geom_text(aes(y = `Mau Pagadores`, label = paste0(sprintf("%.2f", `Mau Pagadores` * 100), "%")), hjust = -0.2, vjust = 0.5) +
scale_x_continuous(breaks = 1:10) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1), name = "Taxa de inadimplência") +
theme_bw()
runApp()
runApp()
decile_stats %>% as_tibble()
ggplot(data = decile_stats, aes(x = decile)) +
geom_bar(aes(y = 1), stat = "identity", fill = "#00887D", alpha = 0.3) +
geom_line(aes(y = `Mau Pagadores`), color = "#00887D") +
geom_point(aes(y = `Mau Pagadores`), color = "#00887D") +
geom_text(aes(y = `Mau Pagadores`, label = paste0(sprintf("%.2f", `Mau Pagadores` * 100), "%")), hjust = -0.2, vjust = 0.5) +
scale_x_continuous(breaks = 1:10) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1), name = "Taxa de inadimplência") +
theme_bw()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
